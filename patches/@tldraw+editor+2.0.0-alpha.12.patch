diff --git a/node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs b/node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs
index a9030ba..0b726f2 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs
@@ -168,24 +168,24 @@ function useDocumentEvents() {
       app.updateViewportScreenBounds();
     }
     container.addEventListener("touchstart", handleTouchStart, { passive: false });
-    document.addEventListener("wheel", handleWheel, { passive: false });
-    document.addEventListener("gesturestart", preventDefault);
-    document.addEventListener("gesturechange", preventDefault);
-    document.addEventListener("gestureend", preventDefault);
-    document.addEventListener("keydown", handleKeyDown);
-    document.addEventListener("keyup", handleKeyUp);
-    window.addEventListener("blur", handleBlur);
-    window.addEventListener("focus", handleFocus);
+    container.addEventListener("wheel", handleWheel, { passive: false });
+    container.addEventListener("gesturestart", preventDefault);
+    container.addEventListener("gesturechange", preventDefault);
+    container.addEventListener("gestureend", preventDefault);
+    container.addEventListener("keydown", handleKeyDown);
+    container.addEventListener("keyup", handleKeyUp);
+    container.addEventListener("blur", handleBlur);
+    container.addEventListener("focus", handleFocus);
     return () => {
       container.removeEventListener("touchstart", handleTouchStart);
-      document.removeEventListener("wheel", handleWheel);
-      document.removeEventListener("gesturestart", preventDefault);
-      document.removeEventListener("gesturechange", preventDefault);
-      document.removeEventListener("gestureend", preventDefault);
-      document.removeEventListener("keydown", handleKeyDown);
-      document.removeEventListener("keyup", handleKeyUp);
-      window.removeEventListener("blur", handleBlur);
-      window.removeEventListener("focus", handleBlur);
+      container.removeEventListener("wheel", handleWheel);
+      container.removeEventListener("gesturestart", preventDefault);
+      container.removeEventListener("gesturechange", preventDefault);
+      container.removeEventListener("gestureend", preventDefault);
+      container.removeEventListener("keydown", handleKeyDown);
+      container.removeEventListener("keyup", handleKeyUp);
+      container.removeEventListener("blur", handleBlur);
+      container.removeEventListener("focus", handleBlur);
     };
   }, [app, container]);
 }
diff --git a/node_modules/@tldraw/editor/dist-esm/lib/utils/assets.mjs b/node_modules/@tldraw/editor/dist-esm/lib/utils/assets.mjs
index 096876f..c5ac9c6 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/utils/assets.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/utils/assets.mjs
@@ -8,8 +8,8 @@ import uniq from "lodash.uniq";
 import { MAX_ASSET_HEIGHT, MAX_ASSET_WIDTH } from "../constants.mjs";
 import { getSvgAsDataUrlSync } from "./export.mjs";
 import { isAnimated } from "./is-gif-animated.mjs";
-const ACCEPTED_IMG_TYPE = ["image/jpeg", "image/png", "image/gif", "image/svg+xml"];
-const ACCEPTED_VID_TYPE = ["video/mp4", "video/quicktime"];
+const ACCEPTED_IMG_TYPE = ["image/jpeg", "image/png", "image/gif", "image/svg+xml", 'image/webp'];
+const ACCEPTED_VID_TYPE = ["video/mp4", "video/quicktime", 'video/webm'];
 const ACCEPTED_ASSET_TYPE = ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).join(", ");
 const isImage = (ext) => ACCEPTED_IMG_TYPE.includes(ext);
 async function getVideoSizeFromSrc(src) {
diff --git a/node_modules/@tldraw/editor/src/lib/utils/assets.ts b/node_modules/@tldraw/editor/src/lib/utils/assets.ts
index bbffeac..b5e269a 100644
--- a/node_modules/@tldraw/editor/src/lib/utils/assets.ts
+++ b/node_modules/@tldraw/editor/src/lib/utils/assets.ts
@@ -19,9 +19,9 @@ import { getSvgAsDataUrlSync } from './export'
 import { isAnimated } from './is-gif-animated'
 
 /** @public */
-export const ACCEPTED_IMG_TYPE = ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml']
+export const ACCEPTED_IMG_TYPE = ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml', 'image/webp']
 /** @public */
-export const ACCEPTED_VID_TYPE = ['video/mp4', 'video/quicktime']
+export const ACCEPTED_VID_TYPE = ['video/mp4', 'video/quicktime', 'video/webm']
 /** @public */
 export const ACCEPTED_ASSET_TYPE = ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).join(', ')
 
